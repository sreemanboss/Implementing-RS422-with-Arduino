#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#define FS 1000.0f
#define N 64

void platform_init(void);
float read_adc_sample(void);
void uart_send(const char *s);

// precomputed constants for N=64
#define COS_BASE 0.995184726672197f   // cos(2π/64)
#define SIN_BASE 0.098017140329561f   // sin(2π/64)

void dft_compute(const float x[], float Xre[], float Xim[]) {
    for (int k = 0; k < N; ++k) {
        float angle_cos = 1.0f; // cos(0)
        float angle_sin = 0.0f; // sin(0)

        // cos(2πk/N), sin(2πk/N) from base constants
        float base_cos = COS_BASE;
        float base_sin = SIN_BASE;

        // scale for frequency bin k
        float step_cos, step_sin;
        if (k == 0) {
            step_cos = 1.0f;
            step_sin = 0.0f;
        } else {
            // compute cos(2πk/N), sin(2πk/N) via multiple-angle formula
            step_cos = COS_BASE;
            step_sin = SIN_BASE;
            for (int m = 1; m < k; m++) {
                float tmp = step_cos * COS_BASE - step_sin * SIN_BASE;
                step_sin = step_cos * SIN_BASE + step_sin * COS_BASE;
                step_cos = tmp;
            }
        }

        float sumRe = 0.0f, sumIm = 0.0f;

        for (int n = 0; n < N; ++n) {
            sumRe += x[n] * angle_cos;
            sumIm += x[n] * angle_sin;

            float next_cos = angle_cos * step_cos - angle_sin * step_sin;
            float next_sin = angle_cos * step_sin + angle_sin * step_cos;
            angle_cos = next_cos;
            angle_sin = next_sin;
        }

        Xre[k] = sumRe;
        Xim[k] = sumIm;
    }
}

static int find_dominant_bin_from_complex(const float re[], const float im[]) {
    int maxIdx = 1;
    float maxMag = 0.0f;
    int half = N / 2;
    for (int k = 1; k < half; ++k) {
        float mag = re[k]*re[k] + im[k]*im[k];
        if (mag > maxMag) {
            maxMag = mag;
            maxIdx = k;
        }
    }
    return maxIdx;
}

int main(void) {
    platform_init();
    float samples[N];
    float Xre[N];
    float Xim[N];
    char msg[80];
    while (1) {
        for (int i = 0; i < N; ++i) {
            samples[i] = read_adc_sample();
        }
        dft_compute(samples, Xre, Xim);
        int bin = find_dominant_bin_from_complex(Xre, Xim);
        float freq = ((float)bin * FS) / (float)N;
        int len = sprintf(msg, "Dominant: %0.3f Hz (bin %d)\r\n", freq, bin);
        (void)len;
        uart_send(msg);
    }
    return 0;
}

#ifdef TEST_DESKTOP
#include <time.h>
static float test_phase = 0.0f;
void platform_init(void) { srand((unsigned)time(NULL)); }
float read_adc_sample(void) {
    float f0 = 60.0f;
    float noise = ((float)rand() / RAND_MAX - 0.5f) * 0.5f;
    float s = (float)(sin(2.0 * 3.141592653589793 * f0 * test_phase / FS)) + noise;
    test_phase += 1.0f;
    return s;
}
void uart_send(const char *s) { fputs(s, stdout); fflush(stdout); }
#endif
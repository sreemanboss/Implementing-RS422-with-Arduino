#include "arm_math.h"
#include "arm_const_structs.h"
#include "stm32f4xx_hal.h"
#include <stdio.h>

#define N   256
#define FS  1000.0f

ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;
UART_HandleTypeDef huart2;

float32_t adc_buffer[N];
float32_t fft_input[2*N];
float32_t fft_mag[N/2];
volatile uint8_t buffer_ready = 0;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);

float compute_dominant_frequency(float32_t *signal)
{
    for (int i = 0; i < N; i++) {
        fft_input[2*i]   = signal[i];
        fft_input[2*i+1] = 0.0f;
    }
    arm_cfft_f32(&arm_cfft_sR_f32_len256, fft_input, 0, 1);
    arm_cmplx_mag_f32(fft_input, fft_mag, N/2);
    uint32_t index;
    float32_t maxVal;
    arm_max_f32(&fft_mag[1], N/2-1, &maxVal, &index);
    return ((index+1) * FS) / N;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
    buffer_ready = 1;
}

int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_DMA_Init();
    MX_ADC1_Init();
    MX_USART2_UART_Init();

    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, N);

    while (1)
    {
        if (buffer_ready)
        {
            buffer_ready = 0;
            float freq = compute_dominant_frequency(adc_buffer);
            char msg[50];
            int len = sprintf(msg, "Freq: %.2f Hz\r\n", freq);
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, len, HAL_MAX_DELAY);
        }
    }
}

void SystemClock_Config(void)
{
}

static void MX_DMA_Init(void)
{
}

static void MX_ADC1_Init(void)
{
}

static void MX_USART2_UART_Init(void)
{
}

static void MX_GPIO_Init(void)
{
}